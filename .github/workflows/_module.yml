# Build and Deploy Modules
name: _ModuleDeployment

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      modules:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

env:
  # Environment variables for the pipeline
  VAR_PATH_TEMP: /tmp/app

jobs:
  # Setup the deployment of the module
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.terraform.outputs.tfoutput }}
      selection: ${{ steps.modules.outputs.selection }}
    steps:
      # Check out the platform repo
      - name: Check Out
        uses: actions/checkout@v4

      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        id: get-secrets
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            d47e736b-2db8-47d5-b46b-b2c8016ece73 > TERRAFORM_API_TOKEN

      # Restore Terraform Cache
      - name: Get Terraform Output
        uses: ./.github/actions/get-terraform
        with:
          WORKSPACE: ${{ inputs.workspace }}
          TEMPPATH: ${{ env.VAR_PATH_TEMP }}
          APITOKEN: ${{ steps.get-secrets.outputs.TERRAFORM_API_TOKEN }}

      # Parse Terraform Output
      # Outputs the terraform server matrix
      - name: Parse Terraform Output
        id: terraform
        run: |
          # Parse Terraform Output
          matrix=$(jq -c '.' "${{ env.VAR_PATH_TEMP }}/tf_output.json")
          echo "================"
          echo "$matrix"
          echo "================"
          echo "tfoutput=$matrix" >> "$GITHUB_OUTPUT"

      # This step filters service definitions from the module based on a list of requested service IDs (passed in as `inputs.services`).
      # The script reads `modules/*.json`, each containing a `.service.id` field, and constructs a GitHub Actions matrix output including only the matched services.
      # Input: inputs.services: "traefik,site"
      # Outputs: selection: "{ "include": [ { "id": "traefik" }, { "id": "site" } ] }"
      - name: Select Modules
        id: modules
        env:
          WORKSPACE: ${{ inputs.workspace }}
        run: |
          echo "[*] Selecting modules ${{ inputs.modules }} ..."
          chmod +x ./deploy/scripts/select-modules.sh
          ./deploy/scripts/select-modules.sh "${{ inputs.modules }}"
          echo "[*] Selecting modules ${{ inputs.modules }} ...DONE"

  deploy:
    name: Deploy Module
    needs: [setup]
    runs-on: ubuntu-latest
    if: ${{ always() && !contains(needs.*.result, 'failure') }}
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.selection) }}
    steps:
      # Do we need to run?
      - name: Skip Deployment
        if: matrix.id == ''
        run: |
          echo "No services to deploy â€” skipping empty matrix list."

      # Check out the repo
      - name: Platform Check Out
        uses: actions/checkout@v4
        if: matrix.id != ''

      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        id: get-secrets
        if: matrix.id != ''
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Setup Bitwarden CLI
      - name: Setup Bitwarden CLI
        uses: ./.github/actions/get-bitwarden
        if: matrix.id != ''
        with:
          bitwarden_token: ${{ secrets.BITWARDEN_TOKEN }}

      # Set up SSH connection
      - name: Set up SSH connection
        if: matrix.id != ''
        env:
          KAMATERA_PRIVATE_KEY: ${{ steps.get-secrets.outputs.KAMATERA_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
     
      # Load service metadata from modules
      # Outputs: repository - ref - moduleinfo
      - name: Load Service Metadata
        id: load
        if: matrix.id != ''
        run: |
          MODULE_FILE="${{ matrix.file }}"
          echo "Reading $MODULE_FILE"
          MODULE_DATA=$(jq -c . "$MODULE_FILE")
          echo "Reading Repository and Ref"
          MODULE_REPO=$(jq -r '.module.repository' <<< "$MODULE_DATA")
          MODULE_REF=$(jq -r '.module.reference // "main"' <<< "$MODULE_DATA")
          echo "repository=$MODULE_REPO" >> "$GITHUB_OUTPUT"
          echo "ref=$MODULE_REF" >> "$GITHUB_OUTPUT"
          echo "moduleinfo=$MODULE_DATA" >> "$GITHUB_OUTPUT"

      # Debug Service Info
      - name: Debug Service Info
        if: matrix.id != ''
        run: |
          echo Service ID: ${{ matrix.id }}
          echo Module Info: ${{ steps.load.outputs.moduleinfo }}
          echo Git Repo: ${{ steps.load.outputs.repository }}
          echo Git Ref: ${{ steps.load.outputs.ref }}

      # Clone the service repository
      # Outputs the service files to service/{serviceid}
      - name: Service Check Out
        uses: actions/checkout@v4
        if: matrix.id != ''
        with:
          repository: ${{ steps.load.outputs.repository }}
          ref: ${{ steps.load.outputs.ref }}
          path: services/${{ matrix.id }}

      # Deploy Module
      - name: Deploy Module
        if: matrix.id != ''
        env:
          VAR_WORKSPACE: ${{ inputs.workspace }}
          VAR_MODULEINFO: ${{ steps.load.outputs.moduleinfo }}
          VAR_TERRAFORM: ${{ needs.setup.outputs.terraform }}
          VAR_PATH_TEMP: ${{ env.VAR_PATH_TEMP }}
          BWS_ACCESS_TOKEN: ${{ secrets.BITWARDEN_TOKEN }}
        run: |
          echo "[*] Deploying module ${{ matrix.id }} ..."
          chmod +x ./deploy/scripts/deploy-swarm-module.sh
          chmod +x ./deploy/scripts/validate-workspace.sh
          chmod +x ./deploy/scripts/validate-module.sh
          chmod +x ./deploy/scripts/validate-service.sh
          #./deploy/scripts/deploy-swarm-module.sh
          echo "[*] Deploying module ${{ matrix.id }} ... DONE"
