# Build and Deploy Jobs
name: _ServiceDeployment

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      environment:
        required: true
        type: string
      services:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

env:
  # Environment variables for the pipeline
  VAR_PATH_TEMP: /tmp/app

jobs:
  # Setup the deployment of the service
  setup:
    name: Setup Service
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      manager: ${{ steps.mgr.outputs.manager }}
      matrix: ${{ steps.regs.outputs.matrix }}
    steps:
      # Check out the platform repo
      - name: Check Out
        uses: actions/checkout@v4

      # Restore Terraform Cache
      - name: Fetch Terraform Output
        uses: ./.github/actions/get-terraform
        with:
          workspace: ${{ inputs.workspace }}
          environment: ${{ inputs.environment }}
          VAR_PATH_TEMP: ${{ env.VAR_PATH_TEMP }}
          TERRAFORM_API_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}

      # Parse Terraform Output to find Manager Servers
      - name: Parse Swarm Servers
        id: mgr
        run: |
          # Read raw JSON
          matrix=$(jq -c '.' "${{ env.VAR_PATH_TEMP }}/tf_output.json")
          echo "================"
          echo "$matrix"
          echo "================"
          # Load helper functions
          source "./deploy/scripts/utilities.sh"
          # Determine workspace file
          WORKSPACE_FILE=$(get_workspace_file "./deploy/workspaces" "${{ inputs.workspace }}") || exit 1
          echo "Using workspace file: $WORKSPACE_FILE"
          # Determine manager label
          MANAGER_ID=$(get_manager_id "$WORKSPACE_FILE") || exit 1
          echo "Using manager label: $MANAGER_ID"
          # Extract only the manager node
          MANAGER_DATA=$(jq -c --arg label "$MANAGER_ID" '.include[] | select(.label == $label)' "${{ env.VAR_PATH_TEMP }}/tf_output.json")
          echo "================"
          echo "Filtered manager data: $MANAGER_DATA"
          echo "================"
          # Export to GitHub Actions output
          echo "manager=$MANAGER_DATA" >> "$GITHUB_OUTPUT"

      # This step filters service definitions from the registry
      # based on a list of requested service IDs (passed in as `inputs.services`).
      # Example: inputs.services: "traefik,site"
      # The script reads `registry/*.json`, each containing a `.service.id` field,
      # and constructs a GitHub Actions matrix output including only the matched services.
      # Output format:
      # {
      #   "include": [
      #     { "id": "traefik", "name": "Traefik" },
      #     { "id": "site", "name": "Website" }
      #   ]
      # }
      - name: Parse service matrix
        id: regs
        run: |
          # inputs.services is a comma-separated list or JSON array of service IDs
          SERVICES_JSON=$(jq -R '[split(",")[]]' <<< "${{ inputs.services }}")

          echo "Filtering for services: $SERVICES_JSON"
          MATRIX='{ "include": ['

          FIRST=true
          for file in registry/*.json; do
            ID=$(jq -r '.service.id' "$file")

            # Check if the ID is in the input list
            if jq -e --arg id "$ID" 'index($id)' <<< "$SERVICES_JSON" >/dev/null; then
              SERVICE_JSON=$(jq -c '.service' "$file")

              # Optional: enrich or customize structure here
              ENTRY=$(jq -n --argjson svc "$SERVICE_JSON" '{ id: $svc.id, name: $svc.name }')

              if [ "$FIRST" = true ]; then
                MATRIX+="$ENTRY"
                FIRST=false
              else
                MATRIX+=",$ENTRY"
              fi
            fi
          done

          MATRIX+='] }'
          echo "Generated matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Services
    needs: [setup]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ always() && !contains(needs.*.result, 'failure') }}
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out Platform
        uses: actions/checkout@v4

      # Load Bitwarden CLI (from reusable action or install directly)
      - name: Setup Bitwarden CLI
        uses: ./.github/actions/setup-bitwarden
        with:
          bitwarden_token: ${{ secrets.BITWARDEN_TOKEN }}

      # Load service metadata from registry
      - name: Load Service Metadata
        id: load
        run: |
          SERVICE_ID="${{ matrix.id }}"
          SERVICE_FILE="registry/${SERVICE_ID}.json"
          echo "Reading $SERVICE_FILE"
          SERVICE_JSON=$(cat "$SERVICE_FILE")
          echo "service_json=$SERVICE_JSON" >> $GITHUB_OUTPUT
          # Extract repo URL if needed for clone
          REPO_URL=$(jq -r '.service.repository // "https://github.com/org/'"$SERVICE_ID"'.git"' <<< "$SERVICE_JSON")
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

      # Clone the service repository
      - name: Clone Service Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.load.outputs.repo_url }}
          path: service/${{ matrix.id }}

      # Configure Service
      - name: Configure Service
        run: |
          echo Service ${{ matrix.id }}
